// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package database

import (
	"context"
	"time"
)

const countAllTimestamps = `-- name: CountAllTimestamps :one
SELECT COUNT(*)
FROM timestamps
`

func (q *Queries) CountAllTimestamps(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAllTimestamps)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countTimestampsByName = `-- name: CountTimestampsByName :one
SELECT COUNT(*)
FROM timestamps
WHERE name = ?
`

func (q *Queries) CountTimestampsByName(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countTimestampsByName, name)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteOldTimestamps = `-- name: DeleteOldTimestamps :exec
DELETE
FROM timestamps
WHERE timestamp < DATE('now', '-30 days')
`

func (q *Queries) DeleteOldTimestamps(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteOldTimestamps)
	return err
}

const deleteTimestampById = `-- name: DeleteTimestampById :exec
DELETE
FROM timestamps
WHERE id = ?
`

func (q *Queries) DeleteTimestampById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTimestampById, id)
	return err
}

const deleteTimestampsByName = `-- name: DeleteTimestampsByName :exec
DELETE
FROM timestamps
WHERE name = ?
`

func (q *Queries) DeleteTimestampsByName(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteTimestampsByName, name)
	return err
}

const getAllTimestamps = `-- name: GetAllTimestamps :many
SELECT id, name, seconds, timestamp
FROM timestamps
`

func (q *Queries) GetAllTimestamps(ctx context.Context) ([]Timestamp, error) {
	rows, err := q.db.QueryContext(ctx, getAllTimestamps)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Timestamp
	for rows.Next() {
		var i Timestamp
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Seconds,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTimestampById = `-- name: GetTimestampById :one
SELECT id, name, seconds, timestamp
FROM timestamps
WHERE id = ?
`

func (q *Queries) GetTimestampById(ctx context.Context, id int64) (Timestamp, error) {
	row := q.db.QueryRowContext(ctx, getTimestampById, id)
	var i Timestamp
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Seconds,
		&i.Timestamp,
	)
	return i, err
}

const getTimestampsByName = `-- name: GetTimestampsByName :many
SELECT id, name, seconds, timestamp
FROM timestamps
WHERE name = ?
`

func (q *Queries) GetTimestampsByName(ctx context.Context, name string) ([]Timestamp, error) {
	rows, err := q.db.QueryContext(ctx, getTimestampsByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Timestamp
	for rows.Next() {
		var i Timestamp
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Seconds,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTimestampsByTimestamp = `-- name: GetTimestampsByTimestamp :many
SELECT id, name, seconds, timestamp
FROM timestamps
WHERE timestamp = ?
`

func (q *Queries) GetTimestampsByTimestamp(ctx context.Context, timestamp time.Time) ([]Timestamp, error) {
	rows, err := q.db.QueryContext(ctx, getTimestampsByTimestamp, timestamp)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Timestamp
	for rows.Next() {
		var i Timestamp
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Seconds,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTimestampsByTimestampRange = `-- name: GetTimestampsByTimestampRange :many
SELECT id, name, seconds, timestamp
FROM timestamps
WHERE timestamp BETWEEN ? AND ?
`

type GetTimestampsByTimestampRangeParams struct {
	FromTimestamp time.Time
	ToTimestamp   time.Time
}

func (q *Queries) GetTimestampsByTimestampRange(ctx context.Context, arg GetTimestampsByTimestampRangeParams) ([]Timestamp, error) {
	rows, err := q.db.QueryContext(ctx, getTimestampsByTimestampRange, arg.FromTimestamp, arg.ToTimestamp)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Timestamp
	for rows.Next() {
		var i Timestamp
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Seconds,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertTimestamp = `-- name: InsertTimestamp :exec
INSERT INTO timestamps (id, name, seconds, timestamp)
VALUES (?, ?, ?, ?)
`

type InsertTimestampParams struct {
	ID        int64
	Name      string
	Seconds   int64
	Timestamp time.Time
}

func (q *Queries) InsertTimestamp(ctx context.Context, arg InsertTimestampParams) error {
	_, err := q.db.ExecContext(ctx, insertTimestamp,
		arg.ID,
		arg.Name,
		arg.Seconds,
		arg.Timestamp,
	)
	return err
}

const updateNameOnly = `-- name: UpdateNameOnly :exec
UPDATE timestamps
SET name = ?
WHERE id = ?
`

type UpdateNameOnlyParams struct {
	Name string
	ID   int64
}

func (q *Queries) UpdateNameOnly(ctx context.Context, arg UpdateNameOnlyParams) error {
	_, err := q.db.ExecContext(ctx, updateNameOnly, arg.Name, arg.ID)
	return err
}

const updateTimestampById = `-- name: UpdateTimestampById :exec
UPDATE timestamps
SET name      = ?,
    timestamp = ?,
    seconds   = ?
WHERE id = ?
`

type UpdateTimestampByIdParams struct {
	Name      string
	Timestamp time.Time
	Seconds   int64
	ID        int64
}

func (q *Queries) UpdateTimestampById(ctx context.Context, arg UpdateTimestampByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateTimestampById,
		arg.Name,
		arg.Timestamp,
		arg.Seconds,
		arg.ID,
	)
	return err
}

const updateTimestampByName = `-- name: UpdateTimestampByName :exec
UPDATE timestamps
SET timestamp = ?,
    seconds   = ?
WHERE name = ?
`

type UpdateTimestampByNameParams struct {
	Timestamp time.Time
	Seconds   int64
	Name      string
}

func (q *Queries) UpdateTimestampByName(ctx context.Context, arg UpdateTimestampByNameParams) error {
	_, err := q.db.ExecContext(ctx, updateTimestampByName, arg.Timestamp, arg.Seconds, arg.Name)
	return err
}

const updateTimestampOnly = `-- name: UpdateTimestampOnly :exec
UPDATE timestamps
SET timestamp = ?
WHERE id = ?
`

type UpdateTimestampOnlyParams struct {
	Timestamp time.Time
	ID        int64
}

func (q *Queries) UpdateTimestampOnly(ctx context.Context, arg UpdateTimestampOnlyParams) error {
	_, err := q.db.ExecContext(ctx, updateTimestampOnly, arg.Timestamp, arg.ID)
	return err
}
